# Generated by Django 5.2.2 on 2025-06-09 13:57

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import location_field.models.plain
import xr_tour_guide_core.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('name', models.CharField(max_length=64, primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tag',
                'db_table': 'Tag',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('city', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('subtitle', models.CharField(max_length=200)),
                ('place', models.CharField(max_length=200)),
                ('coordinates', location_field.models.plain.PlainLocationField(blank=True, max_length=63, null=True)),
                ('category', models.CharField(choices=[('INSIDE', 'Inside'), ('OUTSIDE', 'Outside'), ('THING', 'Thing')], default='INSIDE', max_length=20)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('build_started_at', models.DateTimeField(blank=True, null=True)),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('status', models.CharField(choices=[('READY', 'Ready'), ('FAILED', 'Failed'), ('BUILDING', 'Building'), ('BUILT', 'Built'), ('SERVING', 'Serving'), ('ENQUEUED', 'Enqueued')], default='READY', max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tour',
                'verbose_name_plural': 'Tours',
                'db_table': 'Tour',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField()),
                ('comment', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='xr_tour_guide_core.tour')),
            ],
        ),
        migrations.CreateModel(
            name='Waypoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('coordinates', location_field.models.plain.PlainLocationField(blank=True, max_length=63, null=True)),
                ('description', models.TextField()),
                ('model_path', models.CharField(max_length=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('build_started_at', models.DateTimeField(blank=True, null=True)),
                ('default_image', models.ImageField(blank=True, null=True, storage=xr_tour_guide_core.models.MinioStorage(), upload_to=xr_tour_guide_core.models.default_image_waypoint)),
                ('pdf_item', models.FileField(blank=True, null=True, storage=xr_tour_guide_core.models.MinioStorage(), upload_to=xr_tour_guide_core.models.upload_media_item)),
                ('readme_item', models.FileField(blank=True, null=True, storage=xr_tour_guide_core.models.MinioStorage(), upload_to=xr_tour_guide_core.models.upload_media_item)),
                ('video_item', models.FileField(blank=True, null=True, storage=xr_tour_guide_core.models.MinioStorage(), upload_to=xr_tour_guide_core.models.upload_media_item)),
                ('audio_item', models.FileField(blank=True, null=True, storage=xr_tour_guide_core.models.MinioStorage(), upload_to=xr_tour_guide_core.models.upload_media_item)),
                ('tag', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='xr_tour_guide_core.tag')),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='waypoints', to='xr_tour_guide_core.tour')),
            ],
            options={
                'verbose_name': 'Waypoint',
                'verbose_name_plural': 'Waypoints',
                'db_table': 'Waypoint',
            },
        ),
        migrations.CreateModel(
            name='WaypointViewImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, storage=xr_tour_guide_core.models.MinioStorage(), upload_to=xr_tour_guide_core.models.upload_to)),
                ('waypoint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='xr_tour_guide_core.waypoint')),
            ],
        ),
    ]
