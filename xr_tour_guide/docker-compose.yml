version: '3.8'

networks:
  backend_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

services:
  db:
    image: mysql:8.0
    container_name: mysql_db_tour_guide
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql_data_xr_tour_guide:/var/lib/mysql
    networks:
      backend_net:
        ipv4_address: 172.28.0.30

  web:
    build: .
    container_name: xr_tour_guide
    volumes:
      - .:/workspace
      - ./staticfiles:/workspace/staticfiles
    environment:
      - PYTHONUNBUFFERED=1
    expose:
      - 8001
    depends_on:
      - db
      - redis
    env_file:
      - .env
    restart: always
    networks:
      - backend_net

  celery:
    build: .
    container_name: xr_tour_guide_celery
    command: celery -A xr_tour_guide worker --concurrency=1 --loglevel=info
    volumes:
      - .:/workspace
    depends_on:
      - web
      - redis
    env_file:
      - .env
    networks:
      - backend_net

  celery-beat:
    build: .
    container_name: xr_tour_guide_celery_beat
    command: celery -A xr_tour_guide beat --loglevel=info
    volumes:
      - .:/workspace
    depends_on:
      - web
      - redis
    env_file:
      - .env
    restart: always
    networks:
      - backend_net

  redis:
    image: redis:7
    container_name: redis_tour_guide
    ports:
      - "6379:6379"
    networks:
    - backend_net

  nginx:
    image: nginx:latest
    container_name: nginx_proxy_tour_guide
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/workspace/staticfiles
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - backend_net

  minio:
    image: minio/minio@sha256:a1ea29fa28355559ef137d71fc570e508a214ec84ff8083e39bc5428980b015e
    container_name: minio_tour_guide
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/data
    networks:
      - backend_net

  createbuckets:
    image: minio/mc@sha256:aead63c77f9db9107f1696fb08ecb0faeda23729cde94b0f663edf4fe09728e3
    depends_on:
      - minio
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c '
      until /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}; do
        echo "Waiting for MinIO to be ready...";
        sleep 5;
      done;
      /usr/bin/mc mb --quiet myminio/${AWS_STORAGE_BUCKET_NAME} || true;
      /usr/bin/mc policy set none myminio/${AWS_STORAGE_BUCKET_NAME} || true;
      '
    networks:
      - backend_net
    
  # ai_training:
  #   # image: cromo_ai_classification:training
  #   build: ../AI_classification/training
  #   container_name: ai_training_tour_guide
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #   env_file:
  #     - .env
  #   # gpus: all
  #   user: root
  #   ports:
  #     - "8090:8090"
  #   networks:
  #     backend_net:
  #       ipv4_address: 172.28.0.20

  # ai_inference:
  #   build: ../AI_classification/inference
  #   container_name: ai_inference_tour_guide
  #   environment:
  #     - PYTHONUNBUFFERED=1
  #   env_file:
  #     - .env
  #   # gpus: all
  #   user: root
  #   ports:
  #     - "8050:8050"
  #   networks:
  #     - backend_net

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "certbot certonly --webroot --webroot-path=/var/www/certbot
      --email ${EMAIL_CERTBOT}
      --agree-tos
      --no-eff-email
      -d xrtourguide.di.unisa.it
      -d xrtourguide.di.unisa.it"
    networks:
      - backend_net
  
  certbot-renew:
    image: certbot/certbot
    container_name: certbot_renew
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: >
      sh -c "certbot renew --webroot --webroot-path=/var/www/certbot && nginx -s reload"
    networks:
      - backend_net

  pmtiles-server:
    build: ../pmtiles-server
    container_name: pmtiles-server
    depends_on:
      - minio
    env_file:
      - .env
    ports:
      - "8081:8081"
    networks:
      - backend_net
      
volumes:
  mysql_data_xr_tour_guide:
  minio_data: